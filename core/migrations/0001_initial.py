# Generated by Django 5.2 on 2025-06-25 22:51

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Allergy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nombre de la alergia')),
                ('common_reactions', models.TextField(verbose_name='Reacciones comunes')),
            ],
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('treatment', models.TextField(blank=True, verbose_name='Tratamiento')),
                ('date', models.DateField(verbose_name='Fecha')),
                ('time', models.TimeField(verbose_name='Hora')),
                ('reason', models.TextField(help_text='Describe el motivo de la cita médica.', verbose_name='Motivo de la cita')),
                ('status', models.CharField(choices=[('P', 'Programada'), ('C', 'Completada'), ('N', 'No Presentado'), ('X', 'Cancelada')], default='P', max_length=1, verbose_name='Estado')),
                ('notes', models.TextField(blank=True, verbose_name='Notas posteriores a la cita')),
            ],
            options={
                'verbose_name': 'Cita',
                'verbose_name_plural': 'Citas',
                'ordering': ['-date', '-time'],
            },
        ),
        migrations.CreateModel(
            name='Disease',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_3', models.CharField(max_length=4, verbose_name='Código CIE-10 (general)')),
                ('code_4', models.CharField(max_length=8, unique=True, verbose_name='Código CIE-10 (específico)')),
                ('name', models.CharField(max_length=255, verbose_name='Nombre de la enfermedad')),
                ('is_primary', models.BooleanField(default=False, verbose_name='Código principal (†)')),
                ('is_manifestation', models.BooleanField(default=False, verbose_name='Código manifestación (*)')),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dni', models.CharField(max_length=8, unique=True, verbose_name='DNI')),
                ('first_name', models.CharField(max_length=100, verbose_name='Nombre')),
                ('last_name', models.CharField(max_length=100, verbose_name='Apellido')),
                ('date_of_birth', models.DateField(verbose_name='Fecha de nacimiento')),
                ('gender', models.CharField(choices=[('M', 'Masculino'), ('F', 'Femenino')], max_length=1, verbose_name='Género')),
                ('blood_type', models.CharField(blank=True, choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], max_length=3, verbose_name='Tipo de Sangre')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Teléfono')),
                ('address', models.TextField(blank=True, verbose_name='Dirección')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Correo Electrónico')),
            ],
            options={
                'verbose_name': 'Paciente',
                'verbose_name_plural': 'Pacientes',
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='Specialty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Especialidad Médica')),
            ],
            options={
                'verbose_name': 'Especialidad',
                'verbose_name_plural': 'Especialidades',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('ADMIN', 'Administrador del Sistema'), ('MANAGEMENT', 'Personal Administrativo'), ('DOCTOR', 'Médico'), ('ATTENDANT', 'Personal de Atención')], default='ADMIN', max_length=20, verbose_name='Rol')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='core_user_groups', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='core_user_permissions', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dni', models.CharField(max_length=8, unique=True, verbose_name='DNI')),
                ('gender', models.CharField(choices=[('M', 'Masculino'), ('F', 'Femenino')], max_length=1, verbose_name='Género')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='doctor_profile', to=settings.AUTH_USER_MODEL, verbose_name='Usuario asociado')),
                ('specialty', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='doctors', to='core.specialty', verbose_name='Especialidad Médica')),
            ],
            options={
                'verbose_name': 'Médico',
                'verbose_name_plural': 'Médicos',
            },
        ),
        migrations.CreateModel(
            name='Diagnosis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True, verbose_name='Notas adicionales')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='Fecha del diagnóstico')),
                ('appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diagnoses', to='core.appointment', verbose_name='Cita asociada')),
                ('disease', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.disease', verbose_name='Enfermedad')),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.doctor', verbose_name='Médico que diagnosticó')),
            ],
            options={
                'verbose_name': 'Diagnóstico',
                'verbose_name_plural': 'Diagnósticos',
                'ordering': ['-date'],
            },
        ),
        migrations.AddField(
            model_name='appointment',
            name='doctor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.doctor', verbose_name='Médico'),
        ),
        migrations.CreateModel(
            name='MedicalExam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exam_type', models.CharField(choices=[('BLOOD_TEST', 'Análisis de Sangre'), ('URINE_TEST', 'Análisis de Orina'), ('X_RAY', 'Radiografía'), ('MRI', 'Resonancia Magnética'), ('CT_SCAN', 'Tomografía Computarizada'), ('ULTRASOUND', 'Ultrasonido'), ('ECG', 'Electrocardiograma'), ('EEG', 'Electroencefalograma'), ('ENDOSCOPY', 'Endoscopia'), ('STOOL_TEST', 'Examen de Heces'), ('THROAT_SWAB', 'Cultivo de Garganta'), ('ALLERGY_TEST', 'Prueba de Alergia'), ('BIOPSY', 'Biopsia'), ('BONE_DENSITY', 'Densitometría Ósea'), ('MAMMOGRAM', 'Mamografía'), ('COLONOSCOPY', 'Colonoscopia'), ('ECHOCARDIOGRAM', 'Ecocardiograma'), ('PULMONARY_FUNCTION', 'Prueba de Función Pulmonar'), ('OTHER', 'Otro')], max_length=20, verbose_name='Tipo de Examen')),
                ('appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_exams', to='core.appointment', verbose_name='Cita asociada')),
            ],
            options={
                'verbose_name': 'Examen Médico',
                'verbose_name_plural': 'Exámenes Médicos',
            },
        ),
        migrations.CreateModel(
            name='MedicalRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('additional_notes', models.TextField(blank=True, verbose_name='Notas adicionales')),
                ('status', models.CharField(choices=[('ACTIVE', 'Activo'), ('CLOSED', 'Cerrado'), ('CHRONIC', 'Crónico')], default='ACTIVE', max_length=10, verbose_name='Estado del caso')),
                ('attending_doctor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.doctor', verbose_name='Médico tratante')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.patient', verbose_name='Paciente')),
            ],
            options={
                'verbose_name': 'Historial Médico',
                'verbose_name_plural': 'Historiales Médicos',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='appointment',
            name='medical_record',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='appointments', to='core.medicalrecord', verbose_name='Caso médico asociado'),
        ),
        migrations.CreateModel(
            name='Medication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nombre del Medicamento')),
                ('generic_name', models.CharField(blank=True, max_length=200, verbose_name='Nombre Genérico')),
                ('manufacturer', models.CharField(max_length=100, verbose_name='Fabricante')),
                ('dosage_form', models.CharField(choices=[('TAB', 'Tableta'), ('CAP', 'Cápsula'), ('LIQ', 'Líquido'), ('INJ', 'Inyección'), ('CRE', 'Crema')], max_length=5, verbose_name='Forma Farmacéutica')),
                ('strength', models.CharField(max_length=50, verbose_name='Concentración')),
                ('quantity_in_stock', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Cantidad en Inventario')),
            ],
            options={
                'verbose_name': 'Medicamento',
                'verbose_name_plural': 'Medicamentos',
                'unique_together': {('name', 'manufacturer', 'dosage_form', 'strength')},
            },
        ),
        migrations.CreateModel(
            name='EmergencyContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=200, verbose_name='Nombre Completo')),
                ('relationship', models.CharField(max_length=100, verbose_name='Parentesco')),
                ('phone', models.CharField(max_length=20, verbose_name='Teléfono')),
                ('address', models.TextField(verbose_name='Dirección')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.patient', verbose_name='Paciente')),
            ],
            options={
                'verbose_name': 'Contacto de Emergencia',
                'verbose_name_plural': 'Contactos de Emergencia',
            },
        ),
        migrations.AddField(
            model_name='appointment',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.patient', verbose_name='Paciente'),
        ),
        migrations.CreateModel(
            name='PatientAllergy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('severity', models.CharField(choices=[('leve', 'Leve'), ('moderada', 'Moderada'), ('grave', 'Grave')], max_length=10, verbose_name='Severidad')),
                ('patient_reactions', models.TextField(verbose_name='Reacciones del paciente')),
                ('date_registered', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de registro')),
                ('allergy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.allergy')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.patient')),
            ],
            options={
                'verbose_name': 'Alergia del Paciente',
                'verbose_name_plural': 'Alergias de los Pacientes',
            },
        ),
        migrations.AddField(
            model_name='patient',
            name='allergies',
            field=models.ManyToManyField(blank=True, help_text='Seleccione las alergias conocidas del paciente', through='core.PatientAllergy', to='core.allergy', verbose_name='Alergias'),
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dosage', models.CharField(max_length=100, verbose_name='Dosis')),
                ('frequency', models.CharField(max_length=100, verbose_name='Frecuencia')),
                ('duration', models.CharField(max_length=50, verbose_name='Duración del Tratamiento')),
                ('instructions', models.TextField(blank=True, verbose_name='Instrucciones Especiales')),
                ('appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='core.appointment', verbose_name='Cita asociada')),
                ('medication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.medication', verbose_name='Medicamento')),
            ],
            options={
                'verbose_name': 'Receta Médica',
                'verbose_name_plural': 'Recetas Médicas',
            },
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['date'], name='core_appoin_date_a776ae_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['time'], name='core_appoin_time_dd5400_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['status'], name='core_appoin_status_e978b8_idx'),
        ),
        migrations.AddConstraint(
            model_name='appointment',
            constraint=models.UniqueConstraint(fields=('doctor', 'date', 'time'), name='unique_doctor_timeslot', violation_error_message='El médico ya tiene una cita programada en este horario'),
        ),
        migrations.AlterUniqueTogether(
            name='patientallergy',
            unique_together={('patient', 'allergy')},
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['last_name', 'first_name'], name='core_patien_last_na_5d3812_idx'),
        ),
    ]
